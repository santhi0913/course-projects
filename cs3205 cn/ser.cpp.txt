#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>
#include <iostream>
#include <utility>
using namespace std;


int player_count = 0;
pthread_mutex_t mutexcount;


void error(const char *msg)
{
    perror(msg);
    pthread_exit(NULL);
}


class Board_Ops{


    char board[3][3]  = { {' ', ' ', ' '},  
                        {' ', ' ', ' '}, 
                        {' ', ' ', ' '} };;


    public: 
    


    void draw_board(){
        printf(" %c | %c | %c \n", board[0][0], board[0][1], board[0][2]);
        printf("-----------\n");
        printf(" %c | %c | %c \n", board[1][0], board[1][1], board[1][2]);
        printf("-----------\n");
        printf(" %c | %c | %c \n", board[2][0], board[2][1], board[2][2]);
    }


    int check_move( int move)    {
        if ((move == 9) || (board[move/3][move%3] == ' ')) { 
            return 1;
        }
        else {       
            return 0;
        }
    }
    void update_board(int move, int player_id){


        board[move/3][move%3] = player_id ? 'X' : 'O';
        
    }


    int check_board( int last_move){


    int row = last_move/3;
    int col = last_move%3;


    if ( board[0][col] == board[1][col] && board[1][col] == board[2][col] ) { 
        
        return 1;
    }
    else if ( board[row][0] == board[row][1] && board[row][1] == board[row][2] ) { 
       


        return 1;
    }
    else if (!(last_move % 2)) { if ( (last_move == 0 || last_move == 4 || last_move == 8) && (board[1][1] == board[0][0] && board[1][1] == board[2][2]) ) {  
           
            return 1;
        }
        if ( (last_move == 2 || last_move == 4 || last_move == 6) && (board[1][1] == board[0][2] && board[1][1] == board[2][0]) ) {
            
            return 1;
        }
    }


    
    return 0;
    }


};






class Server{
    
    
    public:
    
    int sockfd;
    void set_Server(int portno){
        
        struct sockaddr_in serv_addr;


        sockfd = socket(AF_INET, SOCK_STREAM, 0);
        if (sockfd < 0) 
            error("ERROR opening listener socket.");
        
        memset(&serv_addr, 0, sizeof(serv_addr));
        serv_addr.sin_family = AF_INET;        
        serv_addr.sin_addr.s_addr = INADDR_ANY;        
        serv_addr.sin_port = htons(portno);                


        if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
            error("ERROR binding listener socket.");
        
    }
    void close_cli(int *cli_sockfd){
        close(cli_sockfd[0]);
        close(cli_sockfd[1]);
    }
    void free_cli(int *cli_sockfd){
        free(cli_sockfd);
    }
    void close_fd(){
        close(sockfd);
    }
    
    void write_client_int(int *cli_sockfd,int idx, int msg) {
        int n = write(cli_sockfd[idx], &msg, sizeof(int));
        if (n < 0)
            error("ERROR writing int to client socket");
    }


    void write_client_msg(int *cli_sockfd,int idx, char * msg)
    {
        int n = write(cli_sockfd[idx], msg, strlen(msg));
        if (n < 0)
            error("ERROR writing msg to client socket");
    }
    void write_clients_msg(int *cli_sockfd,char * msg)
    {
        write_client_msg(cli_sockfd,0, msg);
        write_client_msg(cli_sockfd,1, msg);
    }


    void write_clients_int(int *cli_sockfd,int msg)
    {
        write_client_int(cli_sockfd,0, msg);
        write_client_int(cli_sockfd,1, msg);
        
    }


    int recv_int(int *cli_sockfd, int idx)
    {
        int msg = 0;
        int n = read(cli_sockfd[idx], &msg, sizeof(int));
        
        if (n < 0 || n != sizeof(int))  return -1;
        return msg;
    }
    int get_player_move(int* cli_sockfd, int idx)
    {
        write_client_msg(cli_sockfd,idx, "TRN");


        return recv_int(cli_sockfd, idx);
    }


    void send_update(int *cli_sockfd,int move, int player_id)
    {
        write_clients_msg(cli_sockfd,"UPD");


        write_clients_int(cli_sockfd,player_id);
        
        write_clients_int(cli_sockfd,move);
        
    }


    void send_player_count(int *cli_sockfd,int idx)
    {
        write_client_msg(cli_sockfd,idx, "CNT");
        write_client_int(cli_sockfd,idx, player_count);


    }


    void get_clients(int *cli_sockfd)
    {
        
        socklen_t clilen;
        struct sockaddr_in serv_addr, cli_addr;


        int num_conn = 0;
        while(num_conn < 2)
        {
            listen(sockfd, 253 - player_count);
            
            memset(&cli_addr, 0, sizeof(cli_addr));


            clilen = sizeof(cli_addr);
        
            cli_sockfd[num_conn] = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
        
            if (cli_sockfd[num_conn] < 0)
                error("ERROR accepting a connection from a client.");


           
            write(cli_sockfd[num_conn], &num_conn, sizeof(int));


            pthread_mutex_lock(&mutexcount);
            player_count++;
            printf("Number of players is now %d.\n", player_count);
            pthread_mutex_unlock(&mutexcount);


            if (num_conn == 0) {
                write_client_msg(cli_sockfd,0,"HLD");


            }
            num_conn++;
        }
    }


};


Server server;
void *run_game(void *thread_data) 
{
    int *cli_sockfd = (int*)thread_data; 
    
    Board_Ops Board;




    printf("Game on!\n");
    
    // send the clients message that the game is starting
    server.write_clients_msg(cli_sockfd,"SRT");
    
    // draw board from the server
    Board.draw_board();
    
    int prev_player_turn = 1;
    int player_turn = 0;
    int game_over = 0;


    int turn_count = 0;
    while(!game_over) {
        
        if (prev_player_turn != player_turn)
            server.write_client_msg(cli_sockfd,(player_turn + 1) % 2, "WAT");


        int valid = 0;
        int move = 0;
        while(!valid) {             
            move = server.get_player_move(cli_sockfd,player_turn);
            if (move == -1) break; 
            printf("Player %d played position %d\n", player_turn, move);
                
            valid = Board.check_move(move);
            if (!valid) { 
                printf("Move was invalid.  try again...\n");
                server.write_client_msg(cli_sockfd,player_turn, "INV");
            }
        }


            if (move == -1) { 
            printf("Player disconnected.\n");
            break;
        }
        else if (move == 9) {
            prev_player_turn = player_turn;
            server.send_player_count(cli_sockfd,player_turn);
        }
        else {
            Board.update_board(move, player_turn);
            server.send_update(cli_sockfd, move, player_turn );
                
         
            Board.draw_board();


            game_over = Board.check_board(move);
            
            if (game_over == 1) {
                server.write_client_msg(cli_sockfd,player_turn, "WIN");
                server.write_client_msg(cli_sockfd,(player_turn + 1) % 2, "LSE");
                printf("Player %d won.\n", player_turn);
            }
            else if (turn_count == 8) {                
                printf("Draw.\n");
                server.write_clients_msg(cli_sockfd, "DRW");
                game_over = 1;
            }


            prev_player_turn = player_turn;
            player_turn = (player_turn + 1) % 2;
            turn_count++;
        }
    }


    printf("Game over.\n");


        server.close_cli(cli_sockfd);


    pthread_mutex_lock(&mutexcount);
    player_count--;
    printf("Number of players is now %d.", player_count);
    player_count--;
    printf("Number of players is now %d.", player_count);
    pthread_mutex_unlock(&mutexcount);
    
    server.free_cli(cli_sockfd);


    pthread_exit(NULL);
}




int main(int argc, char *argv[])
{   
    if (argc < 2) {
        fprintf(stderr,"ERROR, no port provided\n");
        exit(1);
    }
    
    //int lis_sockfd = setup_listener(atoi(argv[1])); 
    server.set_Server(atoi(argv[1]));
    pthread_mutex_init(&mutexcount, NULL);


    while (1) {
        if (player_count <= 252) {   
            int *cli_sockfd = (int*)malloc(2*sizeof(int)); 
            memset(cli_sockfd, 0, 2*sizeof(int));
            //server.set_cli_sockfd(cli_sockfd);
            server.get_clients(cli_sockfd);
            
            pthread_t thread;
            int result = pthread_create(&thread, NULL, run_game, (void *)cli_sockfd);
            //run_game(cli_sockfd);
            if (result){
                exit(-1);
            }
            
            }
    }


    server.close_fd();


pthread_mutex_destroy(&mutexcount);
pthread_exit(NULL);
}
